name: Update Version

on:
  push:
    branches:
      - production

jobs:
  update-version:
    runs-on: ubuntu-latest

    steps:
      - name: Setup SSH Key from Secrets
        env:
          PRIVATE_KEY: ${{ secrets.GH_ACTIONS_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Checkout repo with SSH
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ssh-key: ${{ secrets.GH_ACTIONS_SSH_KEY }}

      - name: Determine highest version from branches
        id: get-version
        run: |
          VERSION=$(git branch -r | grep 'version/v' | sed 's/.*version\///' | sort -V | tail -n 1)
          BASE_MAJOR=$(echo $VERSION | cut -d. -f1)
          BASE_MINOR=$(echo $VERSION | cut -d. -f2)
          BASE_MINOR=$(($BASE_MINOR + 1))
          echo "::set-output name=base_version::v$BASE_MAJOR.$BASE_MINOR"

      - name: Read and update .version file
        id: update-version
        run: |
          CURRENT=$(cat .version)
          BASE_VERSION=$(echo ${{ steps.get-version.outputs.base_version }} | sed 's/v//')
          if [[ -z "$CURRENT" ]]; then
            NEW_VERSION="$BASE_VERSION.001"
          else
            CUR_MAJOR=$(echo $CURRENT | cut -d. -f1)
            CUR_MINOR=$(echo $CURRENT | cut -d. -f2)
            CUR_PATCH=$(echo $CURRENT | cut -d. -f3)
            if [[ "$CUR_MAJOR.$CUR_MINOR" != "$BASE_VERSION" ]]; then
              NEW_VERSION="$BASE_VERSION.001"
            else
              CUR_PATCH=$(($CUR_PATCH + 1))
              NEW_VERSION="$BASE_VERSION.$CUR_PATCH"
            fi
          fi
          echo "$NEW_VERSION" > .version
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .version
          git commit -m "Update .version to $NEW_VERSION"
          git push

